body{
    display: contents;
    /* text-align: center; */
}

.navar{
    float: right;
    margin: 20px;
}

.nav-item{
 text-decoration: none;
 color: black;
 margin-right: 15px;
}

.nav-item:hover{ /*이건 마우스를 가져다 뒀을때 보이게 하는 효과이다다*/
    color: blue;
    text-decoration: underline;
}


.main{
    margin-top: 300px;
    text-align: center;
}

.input-area{
    margin-top: 20px;
}

.input-box{
    width: 584px;
    height: 46px;
    border-radius: 24px;
    padding-left: 50px;
    padding-right: 50px;
}


.button-area{
    padding: 20px 20px;
}

/*button-Design*/
.purple {background: #cb99c5;}
.cyan   {background: #7fccde;}
.rounded {border-radius: 10px; }/*상자 모서리 둥근 정도*/
.btn {
    position: relative;
    border: 0;
    padding: 15px 25px;/*2개인 경우는 처음꺼는 위아래 두번째는 오왼왼*/
    display: inline-block;
    text-align: center;
    color: white;
    margin: 0px 5px;
  }
  
  /*hover-Event*/
  .third {
    border-color: blue;
    color: #fff;
    box-shadow: 0 0 40px 40px rgba(16, 16, 195, 0.707) inset, 0 0 0 0 rgba(91, 91, 216, 0.559);
    transition: all 150ms ease-in-out;
    
    &:hover {
      box-shadow: 0 0 10px 0 blue inset, 0 0 10px 4px rgba(91, 91, 216, 0.559);
    }
  }
  


.search-icon{
    position: relative;
    left: 40px;
}

.mic-icon{
    position: relative;
    right: 40px;
}


.main-last{
    margin-top: 10px;
    text-decoration: none;
    color: black;
    margin-right: 15px;
}
.main-last a {
    text-decoration: none;  /* 링크의 밑줄 제거 */
    color: blue;           /* 링크 색상 변경 */
}

.main-last a:hover {
    text-decoration: underline;  /* 링크의 밑줄 제거 */
    color: black;           /* 링크 색상 변경 */
}


.footer{
    position: absolute;/*절대값 기준으로 움직임  relative는 있던위치에서 움직임*/ 
    bottom: 0px;
    background: #f2f2f2;/*이건 컨텐츠가 있는 범위만 적용이 도니다 그이유는 위 absolute를 써서 그럼*/
   width: 100%; /*그래서 여기서 이걸 쓰면 자신 부모의 100%넓이를 쓴다 */
}

.first-line {
    padding: 15px 30px;
    border-bottom: 1px solid #dadce0;
    font-size: 15px;
    color: rgba(0, 0, 0, 0.54);
}

.second-line {
    padding: 15px 30px;
    font-size: 15px;
    color: rgba(0, 0, 0, 0.54);
}

.second-line-second{
    float: right;
}
/*CSS에서 모든 속성이 자동으로 상속되는 것은 아닙니다. 
특정 속성들은 부모 요소로부터 **자동 상속**되지만, 일부 속성들은 **기본적으로 상속되지 않습니다.  

---

## ✅ **1. 상속되는 속성 (inherit by default)**
부모 요소의 값을 자동으로 상속받는 속성들입니다.  
**주로 텍스트와 관련된 속성**들이 여기에 해당됩니다.  
✔ 예시:
- `color` (글자 색상)
- `font` (글꼴)
- `font-size` (글자 크기)
- `font-family` (글꼴 스타일)
- `visibility` (보이기/숨기기)
- `direction` (글쓰기 방향)

📌 **예제**
```css
.container {
    color: red;
}
```
```html
<div class="container">
    <p>이 문장은 빨간색입니다.</p>
</div>
```
→ `<p>` 태그는 자동으로 `color: red;`를 **상속받습니다.** ✅

---

## ❌ **2. 기본적으로 상속되지 않는 속성 (do not inherit by default)**
부모 요소의 값을 자동으로 상속받지 않는 속성들입니다.  
**주로 박스 모델과 레이아웃 관련 속성**들이 여기에 해당됩니다.  
✔ 예시:
- `width` (너비)
- `height` (높이)
- `margin` (바깥 여백)
- `padding` (안쪽 여백)
- `border` (테두리)
- `background` (배경 스타일)
- `display` (표시 방식)
- `position` (위치)
- `overflow` (넘치는 내용 처리 방식)

📌 **예제**
```css
.container {
    background-color: lightgray;
    border: 2px solid black;
}
```
```html
<div class="container">
    <p>이 문장은 배경색을 상속받지 않습니다.</p>
</div>
```
→ `<p>` 태그에는 `background-color: lightgray;`가 적용되지 않습니다. ❌  
(부모의 `background-color` 속성은 상속되지 않기 때문)  

---

## 🔹 **3. 강제로 상속받도록 설정하는 방법**
CSS에서 상속되지 않는 속성도 **`inherit`** 키워드를 사용하면 강제로 상속받을 수 있습니다.

✔ 예시: `background-color` 속성은 기본적으로 상속되지 않지만, `inherit`을 사용하면 상속됩니다.
```css
.container {
    background-color: lightgray;
}

.container p {
    background-color: inherit;
}
```
→ 이제 `<p>` 태그도 `background-color: lightgray;`를 상속받습니다. ✅

---

## 🔸 **4. 상속을 차단하는 방법**
부모로부터 자동 상속되는 속성을 차단하려면 **`initial`** 또는 **`unset`** 키워드를 사용할 수 있습니다.

✔ 예시: `color` 속성의 상속 차단
```css
.container {
    color: red;
}

.container p {
    color: initial;
}
```
→ `<p>` 태그는 `color: red;`를 상속받지 않고 **브라우저 기본 색상**(보통 검정색)으로 설정됩니다.

---

## 📌 **정리**
✅ **자동으로 상속되는 속성:**  
- `color`, `font-size`, `font-family` 등 텍스트 관련 속성  
❌ **자동으로 상속되지 않는 속성:**  
- `background`, `margin`, `padding`, `border`, `width`, `height` 등 박스 모델 관련 속성  
📌 **속성 강제 상속:** `inherit`  
📌 **속성 초기화:** `initial`, `unset`  

따라서 `<a>` 태그가 부모의 `color` 값을 상속받지 않는 것은 **자동 상속되지 않는 속성이기 때문**이며, `inherit`을 사용하면 해결할 수 있습니다.*/

.second-span a {
    text-decoration: none;
    color: black;
}
.second-span a:hover{
    text-decoration:underline;
    color:blue
}

/*❓ 왜 div에 text-decoration: none;을 줘도 적용되지 않을까?
text-decoration은 인라인 요소(a, span 등)에만 적용되는 속성.
div는 블록 요소이므로 text-decoration을 적용해도 내부의 <a> 태그에는 영향을 주지 않음.
따라서, **div a { text-decoration: none; }**처럼 직접 <a> 태그에 적용해야 함.
✅ 결론
❌ div 태그에 text-decoration: none;을 적용하면 a 태그의 밑줄이 제거되지 않음.
✅ div a { text-decoration: none; }으로 직접 적용해야 함! 근데 이건 이렇게 하면 모든 div에 적용이 됨됨*/



















.text-align{
    text-align: right;
}
.float{
    float: right;
}
/**맞습니다! `text-align`과 `float`은 공간을 처리하는 방식에서 차이가 있습니다. 다시 말해, `text-align`과 `float`은 각각 **요소의 정렬**과 **문서 흐름에서 벗어나서 배치**하는 방식에 차이가 있습니다. 좀 더 명확하게 설명드리겠습니다.

### 1. **`text-align`의 동작**

- **목적**: `text-align`은 **텍스트**나 **인라인 요소**를 부모 요소 내에서 **수평으로 정렬**하는 데 사용됩니다.
- **공간 처리**: `text-align`은 텍스트나 인라인 요소의 정렬만 조정할 뿐, 그 요소가 차지하는 **공간 자체는 변하지 않습니다**. 예를 들어, `text-align: right;`을 적용하면, 텍스트나 인라인 요소는 **오른쪽으로 정렬**되지만, 텍스트가 차지하는 공간은 그대로 남아 있습니다.
  
#### 예시:
```html
<div style="text-align: right;">
  이 텍스트는 오른쪽에 정렬됩니다.
</div>
```
- **효과**: 텍스트는 오른쪽으로 정렬되지만, 이 공간을 차지하는 다른 요소들이 **그 아래로 쌓여** 계속 배치됩니다. **빈 공간**이 오른쪽에 생기지만, 아래의 요소들이 그 공간을 채우지 않고 원래대로 배치됩니다.

---

### 2. **`float`의 동작**

- **목적**: `float`은 요소를 **왼쪽**이나 **오른쪽**으로 띄워서 **주변 요소들이 그 주위를 감싸도록** 만듭니다.
- **공간 처리**: `float`을 사용하면 해당 요소가 문서 흐름에서 벗어나고, 그 공간을 **다른 요소가 차지**할 수 있게 됩니다. 즉, `float`된 요소가 차지한 공간이 **밑에 있던 다른 요소들**에 의해 채워집니다.

#### 예시:
```html
<div style="float: right; width: 200px; height: 100px; background-color: lightblue;">
  오른쪽으로 띄운 박스입니다.
</div>
<div style="background-color: lightgreen;">
  이 요소는 위의 박스를 감싸기 위해 오른쪽 공간을 차지합니다.
</div>
```
- **효과**: `float: right;`이 적용된 첫 번째 박스는 오른쪽으로 띄워지며, 그 옆에 있는 두 번째 박스가 **그 공간을 채우기 위해 왼쪽으로 밀려** 배치됩니다. 즉, 두 번째 박스가 `float`된 박스를 **둘러싸며 배치**됩니다.

---

### 핵심 차이점

| 특성                   | `text-align`                                 | `float`                                              |
|------------------------|---------------------------------------------|-----------------------------------------------------|
| **목적**               | 텍스트나 인라인 요소를 **수평으로 정렬**   | 요소를 왼쪽/오른쪽으로 띄워서 **주변 요소들이 감싸게** 만듦 |
| **공간 처리**           | 정렬된 요소는 **원래 차지한 공간을 그대로 유지** | `float`된 요소의 자리를 **다른 요소들이 차지**           |
| **주요 사용 예시**      | 텍스트나 인라인 요소(이미지 포함)의 정렬    | 이미지, 박스, 문단 등을 띄우거나 감싸는 레이아웃 구성   |
| **문서 흐름에 미치는 영향** | 요소는 **문서 흐름에 영향을 주지 않음**     | 요소가 **문서 흐름에서 벗어나** 다른 요소들이 그 자리를 차지 |
| **빈 공간 처리**        | 오른쪽으로 정렬되면 그 자리는 **빈 공간**으로 남음 | `float`된 요소의 공간을 **밑에 있는 요소가 채움**       |

### 결론:
- **`text-align`**은 **텍스트나 인라인 요소의 정렬**만 다루며, 그 자체로 **빈 공간**을 만들지는 않지만, **정렬된 요소가 그 자리를 차지**하고, 빈 공간은 다른 요소가 차지하지 않습니다.
- **`float`**은 요소를 **띄워**서 그 공간을 **다른 요소가 차지**하도록 하여, **빈 공간 없이** 레이아웃이 자연스럽게 채워지게 됩니다.

따라서, `text-align`은 주로 **정렬**에 사용되고, `float`은 **요소의 배치와 흐름 변경**에 사용됩니다./